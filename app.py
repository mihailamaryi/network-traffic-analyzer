import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import time
from datetime import datetime, timedelta
import threading
import logging
import os
import random
from collections import defaultdict
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Advanced Network Analysis",
    layout="wide",
    page_icon="üåê"
)

st.title("üåê Advanced Network Traffic Analysis")
st.write("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ–º –∞–Ω–æ–º–∞–ª–∏–π")


class AdvancedPacketProcessor:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π"""

    def __init__(self, demo_mode=True):
        self.demo_mode = demo_mode
        self.protocol_map = {
            0: 'HOPOPT', 1: 'ICMP', 2: 'IGMP', 6: 'TCP', 17: 'UDP',
            41: 'IPv6', 47: 'GRE', 50: 'ESP', 51: 'AH', 89: 'OSPF'
        }

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        self.start_time = datetime.now()
        self.lock = threading.Lock()
        self.packet_data = []
        self.protocol_stats = defaultdict(int)
        self.source_stats = defaultdict(int)
        self.destination_stats = defaultdict(int)
        self.port_stats = defaultdict(int)
        self.total_packets = 0
        self._running = True

        # –î–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.timeline_data = []
        self.last_timeline_update = datetime.now()
        self.current_second_stats = defaultdict(int)
        self.suspicious_activity = []

        # –ü–æ—Ä—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.common_ports = {
            80: 'HTTP', 443: 'HTTPS', 53: 'DNS', 22: 'SSH',
            25: 'SMTP', 110: 'POP3', 143: 'IMAP', 993: 'IMAPS',
            995: 'POP3S', 21: 'FTP', 23: 'Telnet', 3389: 'RDP'
        }

        if not demo_mode:
            self.setup_real_capture()
        else:
            self.setup_demo_capture()

    def get_protocol_name(self, protocol_num):
        return self.protocol_map.get(protocol_num, f'UNKNOWN({protocol_num})')

    def classify_port(self, port):
        """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç –ø–æ —Ç–∏–ø—É —Å–µ—Ä–≤–∏—Å–∞"""
        return self.common_ports.get(port, f'Port {port}')

    def detect_anomalies(self, packet_info):
        """–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        anomalies = []

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—ã—á–Ω–æ –±–æ–ª—å—à–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
        if packet_info['size'] > 1500:
            anomalies.append(f"–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç: {packet_info['size']} –±–∞–π—Ç")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
        if 'src_port' in packet_info:
            if packet_info['src_port'] < 1024 and packet_info['src_port'] not in self.common_ports:
                anomalies.append(f"–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ—Ä—Ç: {packet_info['src_port']}")

        return anomalies

    def setup_demo_capture(self):
        def demo_capture():
            sources = [f"192.168.1.{i}" for i in range(1, 50)] + ["10.0.0.5", "172.16.0.10"]
            destinations = ['8.8.8.8', '1.1.1.1', '8.8.4.4', '10.0.0.1', 'google.com', 'youtube.com']
            protocols = ['TCP', 'UDP', 'ICMP']

            while self._running:
                try:
                    current_time = datetime.now()
                    current_second = current_time.replace(microsecond=0)

                    packets_to_generate = random.randint(3, 15)

                    with self.lock:
                        for _ in range(packets_to_generate):
                            protocol = random.choice(protocols)
                            src_port = random.choice([80, 443, 53, 22, 8080, 3000, 5000])
                            dst_port = random.choice([80, 443, 53, 22, 8080])

                            packet = {
                                'timestamp': current_time,
                                'source': random.choice(sources),
                                'destination': random.choice(destinations),
                                'protocol': protocol,
                                'src_port': src_port,
                                'dst_port': dst_port,
                                'size': random.randint(60, 1200),
                                'service': self.classify_port(dst_port)
                            }

                            # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π (–∏–Ω–æ–≥–¥–∞ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º)
                            if random.random() < 0.05:  # 5% chance for demo anomalies
                                packet['size'] = random.randint(2000, 5000)
                                packet['anomalies'] = ["–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"]

                            self.packet_data.append(packet)
                            self.protocol_stats[protocol] += 1
                            self.source_stats[packet['source']] += 1
                            self.destination_stats[packet['destination']] += 1
                            self.port_stats[packet['service']] += 1
                            self.total_packets += 1
                            self.current_second_stats[protocol] += 1

                        if current_time - self.last_timeline_update >= timedelta(seconds=1):
                            timeline_entry = {
                                'timestamp': current_second,
                                'total': sum(self.current_second_stats.values())
                            }
                            for protocol, count in self.current_second_stats.items():
                                timeline_entry[protocol] = count

                            self.timeline_data.append(timeline_entry)
                            self.last_timeline_update = current_time
                            self.current_second_stats.clear()

                            if len(self.timeline_data) > 120:
                                self.timeline_data.pop(0)

                        if len(self.packet_data) > 5000:
                            self.packet_data = self.packet_data[-5000:]

                    time.sleep(0.1)

                except Exception as e:
                    logger.error(f"Demo error: {e}")
                    time.sleep(1)

        thread = threading.Thread(target=demo_capture, daemon=True)
        thread.start()

    def setup_real_capture(self):
        try:
            from scapy.all import sniff, IP, TCP, UDP

            def real_capture():
                current_second = datetime.now().replace(microsecond=0)

                def process_packet(packet):
                    nonlocal current_second

                    if not self._running:
                        return False

                    try:
                        if IP in packet:
                            with self.lock:
                                protocol_num = packet[IP].proto
                                protocol_name = self.get_protocol_name(protocol_num)
                                current_time = datetime.now()

                                packet_info = {
                                    'timestamp': current_time,
                                    'source': packet[IP].src,
                                    'destination': packet[IP].dst,
                                    'protocol': protocol_name,
                                    'size': len(packet)
                                }

                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ä—Ç—ã
                                if TCP in packet:
                                    packet_info['src_port'] = packet[TCP].sport
                                    packet_info['dst_port'] = packet[TCP].dport
                                    packet_info['service'] = self.classify_port(packet[TCP].dport)
                                elif UDP in packet:
                                    packet_info['src_port'] = packet[UDP].sport
                                    packet_info['dst_port'] = packet[UDP].dport
                                    packet_info['service'] = self.classify_port(packet[UDP].dport)

                                # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
                                anomalies = self.detect_anomalies(packet_info)
                                if anomalies:
                                    packet_info['anomalies'] = anomalies
                                    self.suspicious_activity.append({
                                        'timestamp': current_time,
                                        'source': packet_info['source'],
                                        'anomaly': anomalies[0]
                                    })

                                self.packet_data.append(packet_info)
                                self.protocol_stats[protocol_name] += 1
                                self.source_stats[packet_info['source']] += 1
                                self.destination_stats[packet_info['destination']] += 1

                                if 'service' in packet_info:
                                    self.port_stats[packet_info['service']] += 1

                                self.total_packets += 1
                                self.current_second_stats[protocol_name] += 1

                                if current_time - current_second >= timedelta(seconds=1):
                                    timeline_entry = {
                                        'timestamp': current_second,
                                        'total': sum(self.current_second_stats.values())
                                    }
                                    for protocol, count in self.current_second_stats.items():
                                        timeline_entry[protocol] = count

                                    self.timeline_data.append(timeline_entry)
                                    current_second = current_time.replace(microsecond=0)
                                    self.current_second_stats.clear()

                                    if len(self.timeline_data) > 120:
                                        self.timeline_data.pop(0)

                                if len(self.packet_data) > 5000:
                                    self.packet_data.pop(0)

                    except Exception as e:
                        logger.error(f"Packet processing error: {e}")

                while self._running:
                    try:
                        sniff(prn=process_packet, store=False, count=50, timeout=1)
                    except Exception as e:
                        logger.error(f"Sniff error: {e}")
                        time.sleep(1)

            thread = threading.Thread(target=real_capture, daemon=True)
            thread.start()

        except ImportError:
            self.demo_mode = True
            self.setup_demo_capture()

    # –î–û–ë–ê–í–õ–Ø–ï–ú –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–ï –ú–ï–¢–û–î–´:

    def get_dataframe(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏"""
        with self.lock:
            return pd.DataFrame(self.packet_data)

    def get_protocol_stats_df(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º"""
        with self.lock:
            data = []
            total = sum(self.protocol_stats.values())

            for protocol, count in self.protocol_stats.items():
                percentage = (count / total * 100) if total > 0 else 0
                data.append({
                    'protocol': protocol,
                    'count': count,
                    'percentage': percentage
                })

            return pd.DataFrame(data)

    def get_timeline_df(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É"""
        with self.lock:
            return pd.DataFrame(self.timeline_data)

    def get_protocols_timeline_df(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º –≤ –¥–ª–∏–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
        with self.lock:
            if not self.timeline_data:
                return pd.DataFrame()

            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –¥–ª–∏–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è Plotly
            long_data = []
            for entry in self.timeline_data:
                timestamp = entry['timestamp']
                for protocol, count in entry.items():
                    if protocol not in ['timestamp', 'total']:
                        long_data.append({
                            'timestamp': timestamp,
                            'protocol': protocol,
                            'packets_per_second': count
                        })

            return pd.DataFrame(long_data)

    def get_metrics(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏"""
        with self.lock:
            duration = (datetime.now() - self.start_time).total_seconds()
            rate = self.total_packets / duration if duration > 0 else 0

            # –¢–µ–∫—É—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥)
            recent_total = 0
            recent_entries = []
            if self.timeline_data:
                recent_entries = self.timeline_data[-5:]
                recent_total = sum(entry.get('total', 0) for entry in recent_entries)
            current_rate = recent_total / 5 if recent_entries else rate

            return {
                'total_packets': self.total_packets,
                'duration': duration,
                'rate_per_sec': rate,
                'current_rate': current_rate,
                'unique_sources': len(self.source_stats),
                'unique_protocols': len(self.protocol_stats),
                'mode': 'DEMO' if self.demo_mode else 'REAL'
            }

    def get_service_stats_df(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º"""
        with self.lock:
            data = []
            total = sum(self.port_stats.values())

            for service, count in self.port_stats.items():
                percentage = (count / total * 100) if total > 0 else 0
                data.append({
                    'service': service,
                    'count': count,
                    'percentage': percentage
                })

            return pd.DataFrame(data)

    def get_anomalies_df(self):
        """–î–∞–Ω–Ω—ã–µ –æ–± –∞–Ω–æ–º–∞–ª–∏—è—Ö"""
        with self.lock:
            return pd.DataFrame(self.suspicious_activity)

    def get_traffic_summary(self):
        """–°–≤–æ–¥–∫–∞ –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É"""
        with self.lock:
            duration = (datetime.now() - self.start_time).total_seconds()
            total_size = sum(p['size'] for p in self.packet_data) if self.packet_data else 0

            return {
                'total_packets': self.total_packets,
                'total_bytes': total_size,
                'duration': duration,
                'avg_packet_size': total_size / self.total_packets if self.total_packets > 0 else 0,
                'unique_sources': len(self.source_stats),
                'unique_destinations': len(self.destination_stats),
                'unique_services': len(self.port_stats),
                'anomalies_detected': len(self.suspicious_activity)
            }

    def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞—Ö–≤–∞—Ç"""
        self._running = False


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
if 'processor' not in st.session_state:
    demo_mode = True
    try:
        import scapy

        if os.name == 'nt':
            import ctypes

            demo_mode = not ctypes.windll.shell32.IsUserAnAdmin()
    except:
        demo_mode = True

    st.session_state.processor = AdvancedPacketProcessor(demo_mode=demo_mode)

processor = st.session_state.processor
summary = processor.get_traffic_summary()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.title("üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
st.sidebar.write(f"**–†–µ–∂–∏–º:** {'üé≠ –î–µ–º–æ' if processor.demo_mode else 'üî¥ –†–µ–∞–ª—å–Ω—ã–π'}")

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
col1, col2, col3, col4, col5 = st.columns(5)

with col1:
    st.metric("–ü–∞–∫–µ—Ç—ã", f"{summary['total_packets']:,}")
with col2:
    st.metric("–û–±—ä–µ–º", f"{summary['total_bytes'] / 1024:.1f} KB")
with col3:
    st.metric("–ò—Å—Ç–æ—á–Ω–∏–∫–∏", summary['unique_sources'])
with col4:
    st.metric("–°–µ—Ä–≤–∏—Å—ã", summary['unique_services'])
with col5:
    st.metric("–ê–Ω–æ–º–∞–ª–∏–∏", summary['anomalies_detected'])

# –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∏–¥–æ–≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
tab1, tab2, tab3, tab4, tab5 = st.tabs(["üìä –û–±–∑–æ—Ä", "üîç –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "üåê –°–µ—Ä–≤–∏—Å—ã", "üìã –î–∞–Ω–Ω—ã–µ"])

with tab1:
    st.subheader("üìä –û–±–∑–æ—Ä —Ç—Ä–∞—Ñ–∏–∫–∞")

    # –ì—Ä–∞—Ñ–∏–∫–∏ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º
    protocols_timeline_df = processor.get_protocols_timeline_df()
    if len(protocols_timeline_df) > 0:
        fig_protocols_timeline = px.line(
            protocols_timeline_df,
            x='timestamp',
            y='packets_per_second',
            color='protocol',
            title="–ü–∞–∫–µ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—É –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º",
            labels={'packets_per_second': '–ü–∞–∫–µ—Ç–æ–≤/—Å–µ–∫—É–Ω–¥—É', 'timestamp': '–í—Ä–µ–º—è'},
            color_discrete_map={
                'TCP': 'blue',
                'UDP': 'green',
                'ICMP': 'red',
                'IGMP': 'orange'
            }
        )
        fig_protocols_timeline.update_layout(
            hovermode='x unified',
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
        )
        st.plotly_chart(fig_protocols_timeline, use_container_width=True)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    protocol_df = processor.get_protocol_stats_df()
    if len(protocol_df) > 0:
        col1, col2 = st.columns(2)

        with col1:
            fig_pie = px.pie(
                protocol_df,
                values='count',
                names='protocol',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"
            )
            st.plotly_chart(fig_pie, use_container_width=True)

        with col2:
            fig_bar = px.bar(
                protocol_df,
                x='protocol',
                y='percentage',
                title="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
                text=protocol_df['percentage'].round(1).astype(str) + '%'
            )
            fig_bar.update_traces(textposition='outside')
            st.plotly_chart(fig_bar, use_container_width=True)

with tab2:
    st.subheader("üîç –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
    service_df = processor.get_service_stats_df()
    if len(service_df) > 0:
        col1, col2 = st.columns(2)

        with col1:
            fig_services = px.pie(
                service_df,
                values='count',
                names='service',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º"
            )
            st.plotly_chart(fig_services, use_container_width=True)

        with col2:
            # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞
            sources_df = pd.DataFrame([
                {'source': source, 'count': count}
                for source, count in list(processor.source_stats.items())[:10]
            ])

            if len(sources_df) > 0:
                fig_sources = px.bar(
                    sources_df,
                    x='source',
                    y='count',
                    title="–¢–æ–ø 10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞"
                )
                st.plotly_chart(fig_sources, use_container_width=True)

with tab3:
    st.subheader("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    anomalies_df = processor.get_anomalies_df()
    if len(anomalies_df) > 0:
        st.warning(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(anomalies_df)}")

        # –ì—Ä–∞—Ñ–∏–∫ –∞–Ω–æ–º–∞–ª–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if 'timestamp' in anomalies_df.columns:
            anomalies_df['time'] = pd.to_datetime(anomalies_df['timestamp']).dt.strftime('%H:%M:%S')
            st.dataframe(anomalies_df[['time', 'source', 'anomaly']], use_container_width=True)
    else:
        st.success("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

with tab4:
    st.subheader("üåê –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Ä—Ç–∞–º/—Å–µ—Ä–≤–∏—Å–∞–º
    if len(service_df) > 0:
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        st.dataframe(service_df.sort_values('count', ascending=False), use_container_width=True)

        # –ì—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        fig_service_trend = px.area(
            service_df.nlargest(8, 'count'),
            x='service',
            y='count',
            title="–ù–∞–∏–±–æ–ª–µ–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
        )
        st.plotly_chart(fig_service_trend, use_container_width=True)

with tab5:
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø–∞–∫–µ—Ç–æ–≤
    df = processor.get_dataframe()
    if len(df) > 0:
        display_df = df.tail(50).copy()
        if 'timestamp' in display_df.columns:
            display_df['time'] = pd.to_datetime(display_df['timestamp']).dt.strftime('%H:%M:%S.%f')[:-3]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        columns_to_show = ['time', 'source', 'destination', 'protocol', 'service', 'size']
        if 'anomalies' in display_df.columns:
            columns_to_show.append('anomalies')

        st.dataframe(display_df[columns_to_show], use_container_width=True, height=500)

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
st.sidebar.markdown("---")
if st.sidebar.button("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"):
    if 'processor' in st.session_state:
        st.session_state.processor.stop()
    st.session_state.clear()
    st.rerun()

if st.sidebar.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"):
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV
    st.sidebar.info("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")

# –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
time.sleep(3)
st.rerun()