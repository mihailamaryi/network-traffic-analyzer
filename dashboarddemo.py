import streamlit as st
import pandas as pd
import plotly.express as px
import time
from datetime import datetime, timedelta
import threading
import logging
import os
import random
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
def get_environment_mode():
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –≥–¥–µ –∑–∞–ø—É—â–µ–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    cloud_env_vars = ['STREAMLIT_SHARING', 'STREAMLIT_SERVER_HEADLESS']
    if any(var in os.environ for var in cloud_env_vars):
        return "CLOUD"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ scapy (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ)
    try:
        import scapy
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (Windows)
        if os.name == 'nt':
            import ctypes
            if ctypes.windll.shell32.IsUserAnAdmin():
                return "LOCAL_ADMIN"
    except ImportError:
        pass

    return "LOCAL_NO_ADMIN"


ENVIRONMENT_MODE = get_environment_mode()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Network Traffic Analyzer",
    layout="wide",
    page_icon="üåê"
)

st.title("üåê Network Traffic Analyzer")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∂–∏–º–µ —Ä–∞–±–æ—Ç—ã
if ENVIRONMENT_MODE == "CLOUD":
    st.success("üöÄ **–í–µ–±-–≤–µ—Ä—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!**")
    st.info("""
    üí° **–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏**

    **–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–∏:**
    1. üì• –°–∫–∞—á–∞–π—Ç–µ –∫–æ–¥ —Å GitHub
    2. üñ•Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python
    3. ‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    4. üî¥ –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É —Å–µ—Ç–µ–≤–æ–º—É —Ç—Ä–∞—Ñ–∏–∫—É
    """)
    DEMO_MODE = True
elif ENVIRONMENT_MODE == "LOCAL_ADMIN":
    st.success("üî¥ **–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞ –ø–∞–∫–µ—Ç–æ–≤**")
    DEMO_MODE = False
else:
    st.warning("üíª **–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**")
    DEMO_MODE = True


class CloudPacketProcessor:
    """–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–π –∏ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã"""

    def __init__(self, demo_mode=True):
        self.demo_mode = demo_mode
        self.protocol_map = {
            1: 'ICMP', 6: 'TCP', 17: 'UDP', 2: 'IGMP'
        }

        # –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        self.start_time = datetime.now()
        self.lock = threading.Lock()
        self.packet_data = []
        self.protocol_stats = defaultdict(int)
        self.source_stats = defaultdict(int)
        self.destination_stats = defaultdict(int)
        self.port_stats = defaultdict(int)
        self.total_packets = 0
        self._running = True

        # –î–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.timeline_data = []
        self.last_timeline_update = datetime.now()
        self.current_second_stats = defaultdict(int)
        self.suspicious_activity = []

        # –ü–æ—Ä—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        self.common_ports = {
            80: 'HTTP', 443: 'HTTPS', 53: 'DNS', 22: 'SSH',
            25: 'SMTP', 110: 'POP3', 143: 'IMAP'
        }

        if not demo_mode:
            self.setup_real_capture()
        else:
            self.setup_demo_capture()

    def get_protocol_name(self, protocol_num):
        return self.protocol_map.get(protocol_num, f'UNKNOWN({protocol_num})')

    def classify_port(self, port):
        return self.common_ports.get(port, f'Port {port}')

    def detect_anomalies(self, packet_info):
        anomalies = []
        if packet_info['size'] > 1500:
            anomalies.append(f"–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç: {packet_info['size']} –±–∞–π—Ç")
        return anomalies

    def setup_demo_capture(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö"""

        def demo_capture():
            sources = [f"192.168.1.{i}" for i in range(1, 30)]
            destinations = ['8.8.8.8', '1.1.1.1', '8.8.4.4', 'google.com', 'youtube.com', 'github.com']
            protocols = ['TCP', 'UDP', 'ICMP']

            # –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
            base_traffic = 10
            traffic_variation = 15

            while self._running:
                try:
                    current_time = datetime.now()
                    current_second = current_time.replace(microsecond=0)

                    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞ (–ø—É–∞—Å—Å–æ–Ω–æ–≤—Å–∫–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ)
                    packets_this_cycle = max(0, int(random.gauss(base_traffic, traffic_variation)))

                    with self.lock:
                        for _ in range(packets_this_cycle):
                            protocol = random.choices(protocols, weights=[70, 25, 5])[0]  # TCP 70%, UDP 25%, ICMP 5%
                            src_port = random.choice([80, 443, 53, 22, 8080, 3000])
                            dst_port = random.choice([80, 443, 53, 22, 8080])

                            # –†–∞–∑–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
                            if protocol == 'TCP':
                                size = random.randint(40, 1500)
                            elif protocol == 'UDP':
                                size = random.randint(40, 512)
                            else:  # ICMP
                                size = random.randint(60, 128)

                            packet = {
                                'timestamp': current_time,
                                'source': random.choice(sources),
                                'destination': random.choice(destinations),
                                'protocol': protocol,
                                'src_port': src_port,
                                'dst_port': dst_port,
                                'size': size,
                                'service': self.classify_port(dst_port)
                            }

                            # –ò–Ω–æ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∞–Ω–æ–º–∞–ª–∏–∏ (2% chance)
                            if random.random() < 0.02:
                                packet['size'] = random.randint(2000, 5000)
                                packet['anomalies'] = ["–ë–æ–ª—å—à–æ–π –ø–∞–∫–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"]

                            self.packet_data.append(packet)
                            self.protocol_stats[protocol] += 1
                            self.source_stats[packet['source']] += 1
                            self.destination_stats[packet['destination']] += 1
                            self.port_stats[packet['service']] += 1
                            self.total_packets += 1
                            self.current_second_stats[protocol] += 1

                        # –û–±–Ω–æ–≤–ª—è–µ–º timeline –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                        if current_time - self.last_timeline_update >= timedelta(seconds=1):
                            timeline_entry = {
                                'timestamp': current_second,
                                'total': sum(self.current_second_stats.values())
                            }
                            for protocol, count in self.current_second_stats.items():
                                timeline_entry[protocol] = count

                            self.timeline_data.append(timeline_entry)
                            self.last_timeline_update = current_time
                            self.current_second_stats.clear()

                            # –•—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥
                            if len(self.timeline_data) > 60:
                                self.timeline_data.pop(0)

                        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤
                        if len(self.packet_data) > 2000:
                            self.packet_data = self.packet_data[-2000:]

                    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    time.sleep(0.05)

                except Exception as e:
                    logger.error(f"Demo error: {e}")
                    time.sleep(1)

        thread = threading.Thread(target=demo_capture, daemon=True)
        thread.start()
        logger.info("Demo capture started")

    def setup_real_capture(self):
        """–†–µ–∞–ª—å–Ω—ã–π –∑–∞—Ö–≤–∞—Ç –ø–∞–∫–µ—Ç–æ–≤ (—Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω–æ)"""
        try:
            from scapy.all import sniff, IP, TCP, UDP

            def real_capture():
                current_second = datetime.now().replace(microsecond=0)

                def process_packet(packet):
                    nonlocal current_second

                    if not self._running:
                        return False

                    try:
                        if IP in packet:
                            with self.lock:
                                protocol_num = packet[IP].proto
                                protocol_name = self.get_protocol_name(protocol_num)
                                current_time = datetime.now()

                                packet_info = {
                                    'timestamp': current_time,
                                    'source': packet[IP].src,
                                    'destination': packet[IP].dst,
                                    'protocol': protocol_name,
                                    'size': len(packet)
                                }

                                if TCP in packet:
                                    packet_info['src_port'] = packet[TCP].sport
                                    packet_info['dst_port'] = packet[TCP].dport
                                    packet_info['service'] = self.classify_port(packet[TCP].dport)
                                elif UDP in packet:
                                    packet_info['src_port'] = packet[UDP].sport
                                    packet_info['dst_port'] = packet[UDP].dport
                                    packet_info['service'] = self.classify_port(packet[UDP].dport)

                                anomalies = self.detect_anomalies(packet_info)
                                if anomalies:
                                    packet_info['anomalies'] = anomalies
                                    self.suspicious_activity.append({
                                        'timestamp': current_time,
                                        'source': packet_info['source'],
                                        'anomaly': anomalies[0]
                                    })

                                self.packet_data.append(packet_info)
                                self.protocol_stats[protocol_name] += 1
                                self.source_stats[packet_info['source']] += 1
                                self.destination_stats[packet_info['destination']] += 1

                                if 'service' in packet_info:
                                    self.port_stats[packet_info['service']] += 1

                                self.total_packets += 1
                                self.current_second_stats[protocol_name] += 1

                                if current_time - current_second >= timedelta(seconds=1):
                                    timeline_entry = {
                                        'timestamp': current_second,
                                        'total': sum(self.current_second_stats.values())
                                    }
                                    for protocol, count in self.current_second_stats.items():
                                        timeline_entry[protocol] = count

                                    self.timeline_data.append(timeline_entry)
                                    current_second = current_time.replace(microsecond=0)
                                    self.current_second_stats.clear()

                                    if len(self.timeline_data) > 120:
                                        self.timeline_data.pop(0)

                                if len(self.packet_data) > 5000:
                                    self.packet_data.pop(0)

                    except Exception as e:
                        logger.error(f"Packet processing error: {e}")

                while self._running:
                    try:
                        sniff(prn=process_packet, store=False, count=50, timeout=1)
                    except Exception as e:
                        logger.error(f"Sniff error: {e}")
                        time.sleep(1)

            thread = threading.Thread(target=real_capture, daemon=True)
            thread.start()
            logger.info("Real capture started")

        except ImportError as e:
            logger.warning(f"Scapy not available: {e}, falling back to demo mode")
            self.demo_mode = True
            self.setup_demo_capture()

    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    def get_dataframe(self):
        with self.lock:
            return pd.DataFrame(self.packet_data)

    def get_protocol_stats_df(self):
        with self.lock:
            data = []
            total = sum(self.protocol_stats.values())
            for protocol, count in self.protocol_stats.items():
                percentage = (count / total * 100) if total > 0 else 0
                data.append({'protocol': protocol, 'count': count, 'percentage': percentage})
            return pd.DataFrame(data)

    def get_timeline_df(self):
        with self.lock:
            return pd.DataFrame(self.timeline_data)

    def get_protocols_timeline_df(self):
        with self.lock:
            if not self.timeline_data:
                return pd.DataFrame()
            long_data = []
            for entry in self.timeline_data:
                timestamp = entry['timestamp']
                for protocol, count in entry.items():
                    if protocol not in ['timestamp', 'total']:
                        long_data.append({
                            'timestamp': timestamp,
                            'protocol': protocol,
                            'packets_per_second': count
                        })
            return pd.DataFrame(long_data)

    def get_service_stats_df(self):
        with self.lock:
            data = []
            total = sum(self.port_stats.values())
            for service, count in self.port_stats.items():
                percentage = (count / total * 100) if total > 0 else 0
                data.append({'service': service, 'count': count, 'percentage': percentage})
            return pd.DataFrame(data)

    def get_anomalies_df(self):
        with self.lock:
            return pd.DataFrame(self.suspicious_activity)

    def get_traffic_summary(self):
        with self.lock:
            duration = (datetime.now() - self.start_time).total_seconds()
            total_size = sum(p['size'] for p in self.packet_data) if self.packet_data else 0
            return {
                'total_packets': self.total_packets,
                'total_bytes': total_size,
                'duration': duration,
                'avg_packet_size': total_size / self.total_packets if self.total_packets > 0 else 0,
                'unique_sources': len(self.source_stats),
                'unique_destinations': len(self.destination_stats),
                'unique_services': len(self.port_stats),
                'anomalies_detected': len(self.suspicious_activity)
            }

    def stop(self):
        self._running = False


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
if 'processor' not in st.session_state:
    st.session_state.processor = CloudPacketProcessor(demo_mode=DEMO_MODE)

processor = st.session_state.processor
summary = processor.get_traffic_summary()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
st.sidebar.title("üìä –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
mode_status = "üé≠ –î–µ–º–æ-—Ä–µ–∂–∏–º" if DEMO_MODE else "üî¥ –†–µ–∂–∏–º —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞—Ö–≤–∞—Ç–∞"
st.sidebar.write(f"**–†–µ–∂–∏–º:** {mode_status}")

if ENVIRONMENT_MODE == "CLOUD":
    st.sidebar.info("""
    **–î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:**
    1. üì• –°–∫–∞—á–∞–π—Ç–µ –∫–æ–¥ —Å GitHub
    2. üêç –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Python 3.8+
    3. ‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """)

# –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
col1, col2, col3, col4, col5 = st.columns(5)

with col1:
    st.metric("–ü–∞–∫–µ—Ç—ã", f"{summary['total_packets']:,}")
with col2:
    st.metric("–û–±—ä–µ–º", f"{summary['total_bytes'] / 1024:.1f} KB")
with col3:
    st.metric("–ò—Å—Ç–æ—á–Ω–∏–∫–∏", summary['unique_sources'])
with col4:
    st.metric("–°–µ—Ä–≤–∏—Å—ã", summary['unique_services'])
with col5:
    st.metric("–ê–Ω–æ–º–∞–ª–∏–∏", summary['anomalies_detected'])

# –í–∫–ª–∞–¥–∫–∏
tab1, tab2, tab3 = st.tabs(["üìä –û–±–∑–æ—Ä —Ç—Ä–∞—Ñ–∏–∫–∞", "üåê –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤", "‚ö†Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"])

with tab1:
    st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞")

    # –ì—Ä–∞—Ñ–∏–∫ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º
    protocols_timeline_df = processor.get_protocols_timeline_df()
    if len(protocols_timeline_df) > 0:
        fig_protocols = px.line(
            protocols_timeline_df,
            x='timestamp',
            y='packets_per_second',
            color='protocol',
            title="–ü–∞–∫–µ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—É –ø–æ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º",
            labels={'packets_per_second': '–ü–∞–∫–µ—Ç–æ–≤/—Å–µ–∫—É–Ω–¥—É', 'timestamp': '–í—Ä–µ–º—è'},
            color_discrete_map={'TCP': 'blue', 'UDP': 'green', 'ICMP': 'red'}
        )
        fig_protocols.update_layout(hovermode='x unified')
        st.plotly_chart(fig_protocols, use_container_width=True)

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
    protocol_df = processor.get_protocol_stats_df()
    if len(protocol_df) > 0:
        col1, col2 = st.columns(2)

        with col1:
            fig_pie = px.pie(
                protocol_df,
                values='count',
                names='protocol',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤"
            )
            st.plotly_chart(fig_pie, use_container_width=True)

        with col2:
            fig_bar = px.bar(
                protocol_df,
                x='protocol',
                y='percentage',
                title="–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ",
                text=protocol_df['percentage'].round(1).astype(str) + '%'
            )
            fig_bar.update_traces(textposition='outside')
            st.plotly_chart(fig_bar, use_container_width=True)

with tab2:
    st.subheader("üåê –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤")

    service_df = processor.get_service_stats_df()
    if len(service_df) > 0:
        col1, col2 = st.columns(2)

        with col1:
            fig_services = px.pie(
                service_df,
                values='count',
                names='service',
                title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º"
            )
            st.plotly_chart(fig_services, use_container_width=True)

        with col2:
            # –¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            sources_df = pd.DataFrame([
                {'source': source, 'count': count}
                for source, count in list(processor.source_stats.items())[:10]
            ])

            if len(sources_df) > 0:
                fig_sources = px.bar(
                    sources_df,
                    x='source',
                    y='count',
                    title="–¢–æ–ø 10 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Ç—Ä–∞—Ñ–∏–∫–∞"
                )
                st.plotly_chart(fig_sources, use_container_width=True)

with tab3:
    st.subheader("‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")

    anomalies_df = processor.get_anomalies_df()
    if len(anomalies_df) > 0:
        st.warning(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {len(anomalies_df)}")

        if 'timestamp' in anomalies_df.columns:
            anomalies_df['time'] = pd.to_datetime(anomalies_df['timestamp']).dt.strftime('%H:%M:%S')
            st.dataframe(anomalies_df[['time', 'source', 'anomaly']], use_container_width=True)
    else:
        st.success("‚úÖ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
    col1, col2 = st.columns(2)

    with col1:
        st.metric("–í—Å–µ–≥–æ –ø–∞–∫–µ—Ç–æ–≤", summary['total_packets'])
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤", summary['unique_sources'])

    with col2:
        st.metric("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–æ–º–∞–ª–∏–π", summary['anomalies_detected'])
        st.metric("–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞", f"{summary['avg_packet_size']:.1f} –±–∞–π—Ç")

# –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
st.sidebar.markdown("---")
if st.sidebar.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    df = processor.get_dataframe()
    if len(df) > 0:
        display_df = df.tail(30).copy()
        if 'timestamp' in display_df.columns:
            display_df['time'] = pd.to_datetime(display_df['timestamp']).dt.strftime('%H:%M:%S')

        columns_to_show = ['time', 'source', 'destination', 'protocol', 'service', 'size']
        if 'anomalies' in display_df.columns:
            columns_to_show.append('anomalies')

        st.dataframe(display_df[columns_to_show], use_container_width=True, height=400)

# –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
st.sidebar.markdown("---")
if st.sidebar.button("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö"):
    if 'processor' in st.session_state:
        st.session_state.processor.stop()
    st.session_state.clear()
    st.rerun()

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
st.sidebar.markdown("---")
st.sidebar.subheader("‚ÑπÔ∏è –û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
st.sidebar.write("""
**Network Traffic Analyzer** - –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ç–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞.

**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
- üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤
- üåê –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤  
- ‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
- üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
""")

# –ê–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
time.sleep(2)
st.rerun()